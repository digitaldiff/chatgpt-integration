{% extends 'chatgpt-integration/_layouts/settings' %}

{% import '_includes/forms' as forms %}

{% set title = 'Settings' %}
{% set selectedSubnavItem = 'settings' %}

{% set fullPageForm = true %}

{% block content %}
    <input type="hidden" name="action" value="plugins/save-plugin-settings">
    <input type="hidden" name="pluginHandle" value="chatgpt-integration">
    {% namespace 'settings' %}
        {{ forms.autosuggestField({
            label: 'API: Access Token'|t('chatgpt-integration'),
            name: 'accessToken',
            value: settings.accessToken,
            instructions: 'Access token for the ChatGPT API'|t('chatgpt-integration'),
            suggestEnvVars: true,
        }) }}

        {{ forms.textField({
            label: 'API: Max Tokens'|t('chatgpt-integration'),
            name: 'maxTokens',
            value: settings.maxTokens,
            autofocus: true,
            instructions: 'Maximum amount of tokens for chatgpt\'s response (<a href="https://platform.openai.com/docs/introduction/tokens">https://platform.openai.com/docs/introduction/tokens</a>)'|t('chatgpt-integration'),
            first: true,
            type: 'number',
        }) }}

        {% set preselected = settings ? settings.model : '' %}
        {% set modelList = { (preselected): preselected} %}

        <div id="modelList">
            {% set modelInput %}
                <div class="flex">
                    {{ forms.select({
                        name: 'model',
                        options: modelList,
                        value: settings ? settings.model : '' ,
                        readonly: true,
                        class: 'model-select-1',
                        targetPrefix: ''
                    }) }}

                    <div class="btn openai-refresh-models">{{ "Refresh"|t('chatgpt-integration') }}</div>
                    <div class="spinner hidden"></div>
                </div>
            {% endset %}

            {{ forms.field({
                label: "Gateway plan"|t('app'),
                instructions: "Choose the model to be used for your prompt requests.",
                id: 'model',
            }, modelInput) }}
        </div>


    {% endnamespace %}
{% endblock %}

{% js %}

$(function () {
    let openaiBtn = $('.openai-refresh-models');

    openaiBtn.on('click', function (ev) {
        if (openaiBtn.hasClass('disabled')) {
            return;
        }

        openaiBtn.addClass('disabled').siblings('.spinner').removeClass('hidden');

        let modelSelect = $('.model-select-1 select');
        var currentModel = $(modelSelect).first().val();

        $.ajax({
            type: "GET",
            url: "https://api.openai.com/v1/models",
            //url: "https://api.openai.com/v1/edits",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization", "Bearer {{ settings.getAccessToken }}");
            },
            success: function(data) {

                let modelList = data['data'];

                openaiBtn
                        .removeClass('disabled')
                        .siblings('.spinner')
                        .addClass('hidden');

                let currentModelStillAvailable = false;

                modelSelect.empty();

                console.log(currentModel);

                for (var i = 0; i < modelList.length; i++) {

                    console.log(modelList[i].id);

                    if (modelList[i].id === currentModel) {
                        currentModelStillAvailable = true;
                    }

                    modelSelect.append(
                        '<option value="' +
                        modelList[i].id +
                        '">' +
                        modelList[i].id + ' (' + modelList[i].owned_by + ')' +
                        '</option>'
                    );
                }

                if (currentModelStillAvailable) {
                    modelSelect.val(currentModel);
                }

            },
            contentType: "application/json; charset=utf-8",
            dataType: "json"
        }).done(function(data) {

        }).fail(function(data) {
            alert(data.responseJSON.error.message);
        });

    });

    openaiBtn.click();
});

{% endjs %}
