{% set settings = craft.app.getPlugins.getPlugin('chatgpt-integration').settings %}

{# TDOD GET PROMPT AND PROMPT SETTINGS #}

{% js %}

$(function() {

    $('.chatgpt-button').each(function () {
        let that = $(this);
        //let hash = $(this).attr('data-hash');
        let input = that.parents('.field').find('.input input, .input textarea');
        if (that.parents('.field').attr('data-type') == 'craft\\redactor\\Field') {
            let textareaId = input.attr('id');
            $('#textareaId').css('padding-right', '100px');
        } else if (that.parents('.field').attr('data-type') == 'craft\\ckeditor\\Field') {

        } else {
            input.css('padding-right', '100px');
        }
    });

    function setPadding() {
        $('.chatgpt-button').each(function () {
            let that = $(this);
            let input = that.parents('.field').find('.input input, .input textarea');
            if (that.parents('.field').attr('data-type') == 'craft\\redactor\\Field') {
                let textareaId = input.attr('id');
                $('#textareaId').css('padding-right', '100px');
            } else {
                input.css('padding-right', '100px');
            }
        });
    }

    $('body').on('click', '.chatgpt-menu a', function(clickEvent) {
        clickEvent.stopPropagation();
        clickEvent.preventDefault();
        let that = $(this);
        let input = $('button[data-hash="' + that.attr('data-hash') + '"]').closest('.input').find('input, textarea').first();
        //$('.field[data-layout-element="' + that.attr('data-hash') + '"] .input').find('input, textarea');
        let query = input.val();
        let hash = that.attr('data-hash');

        let field = $('button[data-hash="' + that.attr('data-hash') + '"]').closest('.field');

        if (field.attr('data-type') == 'craft\\redactor\\Field') {
            let textareaId = input.attr('id');
            $R('#' + textareaId, 'source.setCode', loadingText);

        } else if (field.attr('data-type') == 'craft\\ckeditor\\Field') {
            let ckEditor = field.find(".input .ck-editor__editable")[0].ckeditorInstance;
            ckEditor.setData(loadingText);
        } else {
            input.val(loadingText);
        }

        sendRequest(that, query, input, hash);
    });
});

/*$('.open-modal').click(function(e) {
e.preventDefault();
let that = $(this);
let input = that.parent(".input").find("input, textarea");
let label = $('.field[data-layout-element="' + that.attr('data-layout-element') + '"]').find('label').text();

console.log('.field[data-layout-element="' + that.attr('data-layout-element') + '"]');
console.log(label);

$('#my-awesome-modal header h2').text(label);

var modal = new Garnish.Modal($('#my-awesome-modal'));
$('#my-awesome-modal').attr('data-layout-element', that.attr('data-layout-element'));
});*/

function sendRequest(prompt, query, textField, hash) {

    $.ajax({
        type: "POST",
        url: "https://api.openai.com/v1/chat/completions",
        //url: "https://api.openai.com/v1/edits",
        beforeSend: function (xhr) {
            xhr.setRequestHeader("Authorization", "Bearer {{ settings.getAccessToken }}");
        },
        data: JSON.stringify({
            "model": "{{ settings.model }}",
            "messages": [{"role": "user", "content": prompt.attr('data-prompt') + query  }],
            "temperature": parseFloat(prompt.attr('data-prompt-temperature')),
            "max_tokens": {{ settings.maxTokens }},
            "top_p": 1,
            "frequency_penalty": parseFloat(prompt.attr('data-prompt-frequencyPenalty')),
            "presence_penalty": parseFloat(prompt.attr('data-prompt-presencePenalty'))
        }),
        success: function(data) {
            let result = data.choices[0].message.content;
            let state = data.choices[0].finish_reason;

            let field = $('button[data-hash="' + hash + '"]').closest('.field');

            if (field.attr('data-type') == 'craft\\redactor\\Field') {
                let textareaId = textField.attr('id');
                $R('#' + textareaId, 'source.setCode', result);
            } else if (field.attr('data-type') == 'craft\\ckeditor\\Field') {
                let ckEditor = field.find(".input .ck-editor__editable")[0].ckeditorInstance;
                ckEditor.setData(result);
            } else {
                $(textField).val(result);
            }
            if(state == 'length') {
                alert('{{ 'The reply has exceeded the specified maximum length. To fix this, either increase the value of the max_token setting or try telling chat-gpt to limit itself to a certain number of words.'|t('chatgpt-integration') }}');
            }
        },
        contentType: "application/json; charset=utf-8",
        dataType: "json"
    }).done(function(data) {

    }).fail(function(data) {
        alert(data.responseJSON.error.message);
        if ($('button[data-hash="' + hash + '"]').closest('.field').attr('data-type') == 'craft\\redactor\\Field') {
            let textareaId = textField.attr('id');
            $R('#' + textareaId, 'source.setCode', query);
        } else {
            $(textField).val(query);
        }
    });
}

const loadingText = '{{ 'Working...'|t('chatgpt-integration') }}';

{% endjs %}

{% css %}
.chatgpt-padding .ck-content {
    padding-right: 8em!important;
}
{% endcss %}

{#<div id="my-awesome-modal" class="modal">
    <div id="modal-body" class="body">
        <header class="header">
            <h2>My Awesome Modal</h2>
        </header>
    </div>
</div>#}